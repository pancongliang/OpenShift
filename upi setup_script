## Installing a user-provisioned bare metal cluster on a restricted network

**Server info**
Hostname | Role | IP |
--- |--- |--- 
bastion.ocp4.example.com    | bastion | 10.74.251.171  10.74.251.204
docker.registry.example.com | bastion | 10.74.251.171
master01.ocp4.example.com   | master | 10.74.251.61
master02.ocp4.example.com   | master | 10.74.254.155
master03.ocp4.example.com   | master | 10.74.253.133
worker01.ocp4.example.com   | worker | 10.74.251.58
worker02.ocp4.example.com   | worker | 10.74.253.49
bootstrap.ocp4.example.com  | bootstrap | 10.74.255.118

### 1.Create the user-provisioned infrastructure (bastion) 

**1.1 Setup subscription:**
~~~
$ subscription-manager register --username=rhn-support-copan --password=pcl102085 --auto-attach

$ subscription-manager list --available |more
  Employee SKU

$ subscription-manager attach --pool=8a85f9a07db4828b017dc5184e5f0863
~~~

**1.2 Install rpm:**
~~~
$ yum install -y wget net-tools podman bind-utils bind  haproxy git bash-completion vim jq nfs-utils httpd httpd-tools  skopeo httpd-manual
$ systemctl disable firewalld
$ sed -i 's#SELINUX=enforcing#SELINUX=disabled#g' /etc/selinux/config 
$ systemctl enable httpd --now 
$ reboot 
~~~

**1.3 Modify httpd.conf (file server):**
~~~
$ sed -i 's/Listen 80/Listen 8080/' /etc/httpd/conf/httpd.conf 

$ cat > /etc/httpd/conf.d/base.conf <<EOF    
<VirtualHost *:8080>
   ServerName bastion
   DocumentRoot /var/www/html/materials/
</VirtualHost>
EOF

$ systemctl restart httpd
~~~

**1.4 Setup DNS server:**

a. Modify named.conf:
~~~
cat << 'EOF' > /etc/named.conf
options {
        listen-on port 53 { any; };
        listen-on-v6 port 53 { ::1; };
        directory       "/var/named";
        dump-file       "/var/named/data/cache_dump.db";
        statistics-file "/var/named/data/named_stats.txt";
        memstatistics-file "/var/named/data/named_mem_stats.txt";
        secroots-file   "/var/named/data/named.secroots";
        recursing-file  "/var/named/data/named.recursing";
        allow-query     { any; };
        forwarders      { 10.75.5.25; };

        /* 
         - If you are building an AUTHORITATIVE DNS server, do NOT enable recursion.
         - If you are building a RECURSIVE (caching) DNS server, you need to enable 
           recursion. 
         - If your recursive DNS server has a public IP address, you MUST enable access 
           control to limit queries to your legitimate users. Failing to do so will
           cause your server to become part of large scale DNS amplification 
           attacks. Implementing BCP38 within your network would greatly
           reduce such attack surface 
        */
        recursion yes;
        # mod
        # allow-query-cache { none; };
        #recursion no;
        # mod

        dnssec-enable yes;
        dnssec-validation yes;

        managed-keys-directory "/var/named/dynamic";

        pid-file "/run/named/named.pid";
        session-keyfile "/run/named/session.key";

        /* https://fedoraproject.org/wiki/Changes/CryptoPolicy */
        //include "/etc/crypto-policies/back-ends/bind.config";
};

zone "example.com" IN {
        type master;
        file "example.com.zone";
        allow-query { any; };
};

zone "74.10.in-addr.arpa" IN {
        type master;
        file "74.10.zone";
        allow-query { any; };
};

logging {
        channel default_debug {
                file "data/named.run";
                severity dynamic;
        };
};

zone "." IN {
        type hint;
        file "named.ca";
};

include "/etc/named.rfc1912.zones";
//include "/etc/named.root.key";
EOF
~~~

b. Add DNS A/AAAA record:
~~~
cat << 'EOF' > /var/named/example.com.zone
$TTL 1W
@       IN      SOA     ns1.example.com.        root (
                        201907070      ; serial
                        3H              ; refresh (3 hours)
                        30M             ; retry (30 minutes)
                        2W              ; expiry (2 weeks)
                        1W )            ; minimum (1 week)
        IN      NS      ns1.example.com.
;
;
ns1     IN      A       10.74.251.171
;
helper  IN      A       10.74.251.171
helper.ocp4     IN      A       10.74.251.171
;
; The api identifies the IP of your load balancer.
api.ocp4.example.com.                  IN      A       10.74.251.171
api-int.ocp4.example.com.              IN      A       10.74.251.171
;
; The wildcard also identifies the load balancer.
*.apps.ocp4.example.com.               IN      A       10.74.251.171
;
; Create entries for the master hosts.
master01.ocp4.example.com.             IN      A       10.74.251.61
master02.ocp4.example.com.             IN      A       10.74.254.155
master03.ocp4.example.com.             IN      A       10.74.253.133
;
; Create entries for the worker hosts.
worker01.ocp4.example.com.             IN      A       10.74.251.58
worker02.ocp4.example.com.             IN      A       10.74.249.234
;
; Create an entry for the bootstrap host.
bootstrap.ocp4.example.com.            IN      A       10.74.255.118
;
; Create entries for the mirror registry hosts.
docker.registry.example.com.           IN      A       10.74.251.171
EOF
~~~

c. Add DNS PTR record:
~~~
cat << 'EOF' > /var/named/74.10.zone
$TTL 1W
@       IN      SOA     ns1.example.com.        root (
                        2019070700      ; serial
                        3H              ; refresh (3 hours)
                        30M             ; retry (30 minutes)
                        2W              ; expiry (2 weeks)
                        1W )            ; minimum (1 week)
        IN      NS      ns1.example.com.
;
; The syntax is "last octet" and the host must have an FQDN
; with a trailing dot.
;
; The api identifies the IP of your load balancer.
;171.251            IN      PTR     api.ocp4.example.com.
;171.251            IN      PTR     api-int.ocp4.example.com.
;
; Create entries for the master hosts.
61.251             IN      PTR     master01.ocp4.example.com.
155.254            IN      PTR     master02.ocp4.example.com.
133.253            IN      PTR     master03.ocp4.example.com.
;
; Create entries for the worker hosts.
58.251             IN      PTR     worker01.ocp4.example.com.
234.249            IN      PTR     worker02.ocp4.example.com.
;
; Create an entry for the bootstrap host.
118.255            IN      PTR     bootstrap.ocp4.example.com.
EOF
~~~

d. Start/Test DNS:
~~~
$ chown named. /var/named/*.zone
$ systemctl enable named --now

echo 'nameserver 10.74.251.171' > /etc/resolv.conf
echo 'DNS1 10.74.251.171' >> /etc/sysconfig/network-scripts/ifcfg-ens3
~~~

**1.5 Setup haproxy（load balancer）:**

a. Modify haproxy.cfg
~~~
cat << EOF > /etc/haproxy/haproxy.cfg 
global
  log         127.0.0.1 local2
  pidfile     /var/run/haproxy.pid
  maxconn     4000
  daemon

defaults
  mode                    http
  log                     global
  option                  dontlognull
  option http-server-close
  option                  redispatch
  retries                 3
  timeout http-request    10s
  timeout queue           1m
  timeout connect         10s
  timeout client          1m
  timeout server          1m
  timeout http-keep-alive 10s
  timeout check           10s
  maxconn                 3000

frontend stats
  bind *:1936
  mode            http
  log             global
  maxconn 10
  stats enable
  stats hide-version
  stats refresh 30s
  stats show-node
  stats show-desc Stats for ocp4 cluster 
  stats auth admin:passwd
  stats uri /stats

listen api-server-6443 
  bind 10.74.251.171:6443
  mode tcp
  server     bootstrap.ocp4.example.com 10.74.255.118:6443 check inter 1s backup
  server     master01.ocp4.example.com 10.74.251.61:6443 check inter 1s
  server     master02.ocp4.example.com 10.74.254.155:6443 check inter 1s
  server     master03.ocp4.example.com 10.74.253.133:6443 check inter 1s

listen machine-config-server-22623 
  bind 10.74.251.171:22623
  mode tcp
  server     bootstrap.ocp4.example.com 10.74.255.118:22623 check inter 1s backup
  server     master01.ocp4.example.com 10.74.251.61:22623 check inter 1s
  server     master02.ocp4.example.com 10.74.254.155:22623 check inter 1s
  server     master03.ocp4.example.com 10.74.253.133:22623 check inter 1s

listen default-ingress-router-80
  bind 10.74.251.171:80
  mode tcp
  balance source
  server     worker01.ocp4.example.com 10.74.251.58:80 check inter 1s
  server     worker02.ocp4.example.com 10.74.249.234:80 check inter 1s

listen default-ingress-router-443
  bind 10.74.251.171:443
  mode tcp
  balance source
  server     worker01.ocp4.example.com 10.74.251.58:443 check inter 1s
  server     worker02.ocp4.example.com 10.74.249.234:443 check inter 1s
EOF
~~~

b. Start haproxy:
~~~
$ systemctl enable haproxy --now
~~~

**1.6 Install oc-install-tool:**
~~~
- openshift-install:
$ curl https://access.redhat.com/downloads/content/290/ver=4.10/rhel---8/4.10.13/x86_64/product-software/openshift-install-linux-4.10.13.tar.gz
$ wget https://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.10.13/openshift-install-linux.tar.gz

$ tar xvf openshift-install-linux-4.10.13.tar.gz
$ mv openshift-install /usr/local/bin/

- oc CLI tools:
$ curl https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/stable/openshift-client-linux.tar.gz --output openshift-client-linux.tar.gz
$ tar xvf oc-4.10.13-linux.tar.gz
$ mv oc kubectl /usr/local/bin/
$ oc version

- oc-mirror tools:
$ curl -O https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/stable/oc-mirror.tar.gz
$ tar -xvf oc-mirror.tar.gz
$ chmod +x ./oc-mirror
$ sudo mv ./oc-mirror /usr/local/bin/

- butane tools:
$ curl https://mirror.openshift.com/pub/openshift-v4/clients/butane/latest/butane --output butane
$ chmod a+x butane && mv butane /usr/local/bin/

ls /usr/local/bin/
~~~

**1.7 Self-signed cert and create offline mirror registry:**

a. Create registry directory:
~~~
$ mkdir -p /opt/registry/{auth,certs,data}
~~~

b. Set the required environment variables:
~~~
CA_CN="Local Red Hat Signer"
OPENSSL_CNF=/etc/pki/tls/openssl.cnf
REGISTRY_DOMAIN='docker.registry.example.com'
REGISTRY_ID=admin
REGISTRY_PW=redhat
~~~

c. Generate root ca.key:
~~~
$ mkdir -p /etc/crts/ && cd /etc/crts/
$ openssl genrsa -out /etc/crts/${REGISTRY_DOMAIN}.ca.key 4096
~~~

d. Generate root ca.crt:
~~~
$ openssl req -x509 \
  -new -nodes \
  -key /etc/crts/${REGISTRY_DOMAIN}.ca.key \
  -sha256 \
  -days 36500 \
  -out /etc/crts/${REGISTRY_DOMAIN}.ca.crt \
  -subj /CN="${CA_CN}" \
  -reqexts SAN \
  -extensions SAN \
  -config <(cat ${OPENSSL_CNF} \
      <(printf '[SAN]\nbasicConstraints=critical, CA:TRUE\nkeyUsage=keyCertSign, cRLSign, digitalSignature'))
~~~

e. Generate domain key:
~~~
$ openssl genrsa -out ${REGISTRY_DOMAIN}.key 2048
~~~

f. Generate domain cert csr:
~~~
$ openssl req -new -sha256 \
    -key /etc/crts/${REGISTRY_DOMAIN}.key \
    -subj "/O=Local Red Hat CodeReady Workspaces/CN=${REGISTRY_DOMAIN}" \
    -reqexts SAN \
    -config <(cat ${OPENSSL_CNF} \
        <(printf "\n[SAN]\nsubjectAltName=DNS:${REGISTRY_DOMAIN}\nbasicConstraints=critical, CA:FALSE\nkeyUsage=digitalSignature, keyEncipherment, keyAgreement, dataEncipherment\nextendedKeyUsage=serverAuth")) \
    -out /etc/crts/${REGISTRY_DOMAIN}.csr
~~~

g. Generate domain crt:
~~~
$ openssl x509 \
    -req \
    -sha256 \
    -extfile <(printf "subjectAltName=DNS:${REGISTRY_DOMAIN}\nbasicConstraints=critical, CA:FALSE\nkeyUsage=digitalSignature, keyEncipherment, keyAgreement, dataEncipherment\nextendedKeyUsage=serverAuth") \
    -days 365 \
    -in /etc/crts/${REGISTRY_DOMAIN}.csr \
    -CA /etc/crts/${REGISTRY_DOMAIN}.ca.crt \
    -CAkey /etc/crts/${REGISTRY_DOMAIN}.ca.key \
    -CAcreateserial -out /etc/crts/${REGISTRY_DOMAIN}.crt
    
$ openssl x509 -in /etc/crts/${REGISTRY_DOMAIN}.ca.crt -text
~~~

h. Copy and trust the cert:
~~~
$ cp /etc/crts/${REGISTRY_DOMAIN}.ca.crt ${REGISTRY_DOMAIN}.crt /etc/pki/ca-trust/source/anchors/
$ update-ca-trust extract
$ cp /etc/crts/${REGISTRY_DOMAIN}.key ${REGISTRY_DOMAIN}.crt /opt/registry/certs/
$ update-ca-trust
~~~

i. Create username and password for offline mirror repository:
~~~
$ htpasswd -bBc /opt/registry/auth/htpasswd $REGISTRY_ID $REGISTRY_PW
~~~

j. Running docker registry:
~~~
podman run \
    --name mirror-registry \
    -p 5000:5000 \
    -e "REGISTRY_AUTH=htpasswd" \
    -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" \
    -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \
    -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/${REGISTRY_DOMAIN}.crt \
    -e REGISTRY_HTTP_TLS_KEY=/certs/${REGISTRY_DOMAIN}.key \
    -e REGISTRY_STORAGE_DELETE_ENABLED=true \
    -v /opt/registry/data:/var/lib/registry:z \
    -v /opt/registry/auth:/auth:z \
    -v /opt/registry/certs:/certs:z \
    -d docker.io/library/registry:2

podman login -u $REGISTRY_ID -p $REGISTRY_PW ${REGISTRY_DOMAIN}:5000
~~~

k.Automatically start docker registry:
~~~
cat << EOF > /etc/systemd/system/mirror-registry.service
[Unit]
Description= registry service
After=network.target
After=network-online.target
[Service]
Restart=always
ExecStart=/usr/bin/podman start -a mirror-registry
ExecStop=/usr/bin/podman stop -t 10 mirror-registry
[Install]
WantedBy=multi-user.target
EOF

systemctl enable mirror-registry.service --now

curl -u $REGISTRY_ID:$REGISTRY_PW -k https://${REGISTRY_DOMAIN}:5000/v2/_catalog
~~~

**1.8 Download ocp image to docker registry:**


b. Add repository authentication to pull-secret:
~~~
podman login -u $REGISTRY_ID -p --authfile /root/pull-secret {REGISTRY_DOMAIN}:5000   
~~~

c. Set the required environment variables:
~~~
$ export OCP_RELEASE=4.10.20
$ export REGISTRY_DOMAIN='docker.registry.example.com:5000'
$ export LOCAL_REPOSITORY='ocp4/openshift4'
$ export PRODUCT_REPO='openshift-release-dev' 
$ export LOCAL_SECRET_JSON='/root/pull-secret'
$ export RELEASE_NAME="ocp-release"
$ export ARCHITECTURE=x86_64
~~~

d. Download ocp image to docker registry:
Optional: Mirror repositories have internet access.
~~~
- Download image to registry:
$ oc adm -a ${LOCAL_SECRET_JSON} release mirror \
  --from=quay.io/${PRODUCT_REPO}/${RELEASE_NAME}:${OCP_RELEASE}-${ARCHITECTURE} \
  --to=${LOCAL_REGISTRY}/${LOCAL_REPOSITORY} \
  --to-release-image=${LOCAL_REGISTRY}/${LOCAL_REPOSITORY}:${OCP_RELEASE}-${ARCHITECTURE} 
~~~

### 2. Install OpenShift Container Platform 4

**2.1 Create the SSH Key for logging in to the node:**

**2.2 Create install-config.yaml:**
~~~
cp /etc/crts/docker.registry.example.com.ca.crt /etc/crts/docker.registry.example.com.ca.crt1
sed -i 's/^/  /' /etc/crts/docker.registry.example.com.ca.crt1
export registry_ca="$(cat /etc/crts/docker.registry.example.com.ca.crt1)"
export registry_id_pwd=$(echo -n "admin:redhat" | base64)
export id_rsa_pub=$(cat /root/.ssh/id_rsa.pub)
export basedomain='example.com'
export clustername=ocp4

cat << EOF > /root/test/install-config.yaml 
apiVersion: v1
baseDomain: $basedomain
compute: 
- hyperthreading: Enabled 
  name: worker
  replicas: 0 
controlPlane: 
  hyperthreading: Enabled 
  name: master
  replicas: 3 
metadata:
  name: $clustername
networking:
  clusterNetwork:
  - cidr: 10.128.0.0/14 
    hostPrefix: 23 
  networkType: OVNKubernetes
  serviceNetwork: 
  - 172.30.0.0/16
platform:
  none: {} 
fips: false 
pullSecret: '{"auths":{"$LOCAL_REGISTRY": {"auth": "$registry_id_pwd","email": "xxx@xxx.com"}}}' 
sshKey: '$id_rsa_pub'
additionalTrustBundle: | 
$registry_ca
imageContentSources:
- mirrors:
  - $LOCAL_REGISTRY/$LOCAL_REPOSITORY
  source: quay.io/openshift-release-dev/ocp-release
- mirrors:
  - $LOCAL_REGISTRY/$LOCAL_REPOSITORY
  source: quay.io/openshift-release-dev/ocp-v4.0-art-dev
EOF
~~~

**2.3 Create kubernetes manifests:**
~~~
$ mkdir /var/www/html/materials/pre

$ cp /root/install-config.yaml  /var/www/html/materials/pre

$ openshift-install create manifests --dir /var/www/html/materials/pre/ 

$ sed -i 's/mastersSchedulable: true/mastersSchedulable: false/' /var/www/html/materials/pre/manifests/cluster-scheduler-02-config.yml
~~~

**2.4 Create and modify ignition configuration files:**
~~~
$ openshift-install create ignition-configs --dir /var/www/html/materials/pre
$ cp /var/www/html/materials/pre/bootstrap.ign /var/www/html/materials/pre/bootstrapbk.ign
$ for i in {01..03}; do cp /var/www/html/materials/pre/master.ign /var/www/html/materials/pre/master$i.ign; done
$ for i in {01..02}; do cp /var/www/html/materials/pre/worker.ign /var/www/html/materials/pre/worker$i.ign; done
$ sed -i 's/}$/,"storage":{"files":[{"path":"\/etc\/hostname","contents":{"source":"data:,master01.ocp4.example.com"},"mode": 420}]}}/' master01.ign
$ sed -i 's/}$/,"storage":{"files":[{"path":"\/etc\/hostname","contents":{"source":"data:,master02.ocp4.example.com"},"mode": 420}]}}/' master02.ign
$ sed -i 's/}$/,"storage":{"files":[{"path":"\/etc\/hostname","contents":{"source":"data:,master03.ocp4.example.com"},"mode": 420}]}}/' master03.ign
$ sed -i 's/}$/,"storage":{"files":[{"path":"\/etc\/hostname","contents":{"source":"data:,worker01.ocp4.example.com"},"mode": 420}]}}/' worker01.ign
$ sed -i 's/}$/,"storage":{"files":[{"path":"\/etc\/hostname","contents":{"source":"data:,worker02.ocp4.example.com"},"mode": 420}]}}/' worker02.ign
$ chmod a+r /var/www/html/materials/pre/*.ign
~~~


b.Set bootstrap/master/worker server ip
~~~
$ cat > /var/www/html/materials/bootstrap.sh <<EOF 
nmcli con mod 'Wired connection 1' ipv4.addresses 10.72.36.159/21 ipv4.gateway 10.74.255.254 ipv4.dns 10.74.251.171 ipv4.method manual connection.autoconnect yes
sudo systemctl restart NetworkManager
sudo sleep 10
EOF

$ chmod 777 /var/www/html/materials/bootstrap-set-ip-1.sh
~~~

# master01-set-ip-1.sh
~~~
$ cat > /var/www/html/materials/master01-set-ip-1.sh <<EOF 
nmcli con mod 'Wired connection 1' ipv4.addresses 10.74.251.61/21 ipv4.gateway 10.74.255.254 ipv4.dns 10.74.251.171 ipv4.method manual connection.autoconnect yes
sudo systemctl restart NetworkManager
EOF

$ chmod 777 /var/www/html/materials/master01-set-ip-1.sh
~~~


# master02-set-ip-1.sh
~~~
$ cat > /var/www/html/materials/master02-set-ip-1.sh <<EOF 
nmcli con mod 'Wired connection 1' ipv4.addresses 10.74.254.155/21 ipv4.gateway 10.74.255.254 ipv4.dns 10.74.251.171 ipv4.method manual connection.autoconnect yes
sudo systemctl restart NetworkManager
EOF

$ chmod 777 /var/www/html/materials/master02-set-ip-1.sh
~~~

# master03-set-ip-1.sh
~~~
$ cat > /var/www/html/materials/master03-set-ip-1.sh <<EOF 
nmcli con mod 'Wired connection 1' ipv4.addresses 10.74.253.133/21 ipv4.gateway 10.74.255.254 ipv4.dns 10.74.251.171 ipv4.method manual connection.autoconnect yes
sudo systemctl restart NetworkManager
EOF

$ chmod 777 /var/www/html/materials/master03-set-ip-1.sh
~~~

# worker01-set-ip-1.sh
~~~
$ cat > /var/www/html/materials/master02-set-ip-1.sh <<EOF 
nmcli con mod 'Wired connection 1' ipv4.addresses 10.74.251.58/21 ipv4.gateway 10.74.255.254 ipv4.dns 10.74.251.171 ipv4.method manual connection.autoconnect yes
sudo systemctl restart NetworkManager
EOF

$ chmod 777 /var/www/html/materials/worker01-set-ip-1.sh
~~~


# worker02-set-ip-1.sh
~~~
$ cat > /var/www/html/materials/master02-set-ip-1.sh <<EOF 
nmcli con mod 'Wired connection 1' ipv4.addresses 10.74.253.49/21 ipv4.gateway 10.74.255.254 ipv4.dns 10.74.251.171 ipv4.method manual connection.autoconnect yes
sudo systemctl restart NetworkManager
EOF

$ chmod 777 /var/www/html/materials/worker01-set-ip-1.sh
~~~


- node(bootstrap/master/worker)
~~~
$ sudo -i
$ curl http://10.74.251.171:8080/bootstrap-set-ip-1.sh | bash
$ curl http://10.74.251.171:8080/master01-set-ip-1.sh | bash
$ curl http://10.74.251.171:8080/master02-set-ip-1.sh | bash
$ curl http://10.74.251.171:8080/master03-set-ip-1.sh | bash
$ curl http://10.74.251.171:8080/worker01-set-ip-1.sh | bash
$ curl http://10.74.251.171:8080/worker02-set-ip-1.sh | bash
~~~

- 单网卡:
$ coreos.inst.install_dev=sda coreos.inst.ignition_url=http://10.74.251.171:8080/pre/bootstrap.ign
ip=10.74.255.118::10.74.255.254:255.255.248.0:bootstrap.ocp4.example.com:ens3:none
nameserver=10.74.251.171 nameserver=10.74.251.204

- bond:
$ coreos.inst.install_dev=sda coreos.inst.ignition_url=http://10.74.251.171:8080/pre/bootstrap.ign
ip=10.74.255.118::10.74.255.254:255.255.248.0:bootstrap.ocp4.example.com:bond0:none bond=bond0:ens3,en7:mode=active-backup
nameserver=10.74.251.171 nameserver=10.74.251.171

- After the restart is complete, access the bootstrap node:
$ ssh core@bootstrap.ocp4.example.com
$ sudo -i

- Check if it is normal or not:
$ netstat -ntplu |grep 6443
$ netstat -ntplu |grep 22623
$ podman ps
$ journalctl -b -f -u release-image.service -u bootkube.service
~~~

c.Install master 01 - 03:
~~~
$ coreos.inst.install_dev=sda coreos.inst.ignition_url=http://10.74.251.171:8080/pre/master.ign  
ip=10.74.251.61::10.74.255.254:255.255.248.0:master01.ocp4.example.com:ens3:none
nameserver=10.74.251.171 nameserver=10.74.251.204

$ coreos.inst.install_dev=sda coreos.inst.ignition_url=http://10.74.251.171:8080/pre/master.ign  
ip=10.74.254.155::10.74.255.254:255.255.248.0:master02.ocp4.example.com:ens3:none
nameserver=10.74.251.171 nameserver=10.74.251.204

$ coreos.inst.install_dev=sda coreos.inst.ignition_url=http://10.74.251.171:8080/pre/master.ign  
ip=10.74.253.133::10.74.255.254:255.255.248.0:master03.ocp4.example.com:ens3:none
nameserver=10.74.251.171 nameserver=10.74.251.204
~~~

d. Check if master is installed:
~~~
$ ssh core@bootstrap.ocp4.example.com
$ sudo -i
$ journalctl -b -f -u bootkube.service
···Wait···
bootkube.service complete    #
bootkube.service: Succeeded  #<--Show this content to complete the master installation.
~~~

e. Install worker 01 - 02:
~~~
$ coreos.inst.install_dev=sda coreos.inst.ignition_url=http://10.74.251.171:8080/pre/worker.ign  
ip=10.74.251.58::10.74.255.254:255.255.248.0:worker01.ocp4.example.com:ens3:none
nameserver=10.74.251.171 nameserver=10.74.251.204

$ coreos.inst.install_dev=sda coreos.inst.ignition_url=http://10.74.251.171:8080/pre/worker.ign  
ip=10.74.249.234::10.74.255.254:255.255.248.0:worker02.ocp4.example.com:ens3:none
nameserver=10.74.251.171 nameserver=10.74.251.204

- Wait for the reboot to complete:
~~~

**2.6 login ocp:**
~~~
- kubeconfig login:
$ echo export KUBECONFIG=/var/www/html/materials/pre/auth/kubeconfig >> /root/.bash_profile
$ echo export LANG=“en_US.UTF-8” >> ~/.bash_profile
$ source ~/.bash_profile

- completion command:
$ oc completion bash >> /etc/bash_completion.d/oc_completion
$ oc whoami
system:admin

$ source ~/.bash_profile
~~~


a.Setup NFS:
~~~
$ mkdir /nfs
$ mkdir /nfs/image-registry
$ useradd nfsnobody
$ chown -R nfsnobody.nfsnobody /nfs
$ chmod -R 777 /nfs
echo '/nfs    **(rw,sync,no_wdelay,no_root_squash,insecure,fsid=0)' >> /etc/exports
$ systemctl enable nfs-server --now
~~~

b.Create PV:
~~~
cat << EOF | oc apply -f -
apiVersion: v1
kind: PersistentVolume
metadata:
  name: image-registry
spec:
  capacity:
    storage: 100Gi
  accessModes:
  - ReadWriteMany
  nfs:
    path: /nfs/image-registry
    server: 10.74.251.171
  persistentVolumeReclaimPolicy: Retain
EOF
~~~

c.Modify image-registry operator:
~~~
$ oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"managementState":"Managed"}}'
$ oc patch configs.imageregistry.operator.openshift.io/cluster --type merge --patch '{"spec":{"storage":{"pvc":{"claim":""}}}}'
~~~

**2.10 Trust the docker repository:**

a.Create configmap:
~~~
$ oc create configmap registry-cas \
     --from-file=docker.registry.example.com..5000=/etc/pki/ca-trust/source/anchors/docker.registry.example.com.ca.crt \
     -n openshift-config
~~~
b.Trust repository
~~~
$ oc patch image.config.openshift.io/cluster --patch '{"spec":{"additionalTrustedCA":{"name":"registry-cas"}}}' --type=merge
~~~

**2.11 Set “samples operator” to specify the docker registry:**
~~~
$ oc patch configs.samples.operator.openshift.io cluster --patch '[{"op": "replace", "path": "/spec/managementState", "value":"Removed"}]' --type=json

$ oc patch configs.samples.operator.openshift.io cluster --patch '{"spec":{"samplesRegistry":null,"skippedImagestreams":null}}' --type=merge

$ oc patch configs.samples.operator.openshift.io cluster --patch '[{"op": "replace", "path": "/spec/managementState", "value":"Managed"}]' --type=json

$ oc patch configs.samples.operator.openshift.io cluster --patch '{"spec":{"samplesRegistry":"docker.registry.example.com:5000","skippedImagestreams":["jenkins","jenkins-agent-nodejs","jenkins-agent-maven"]}}' --type=merge
~~~
